#!/usr/bin/env python3

"""transplant - Recreate directory structures from `tree`'s output.

Features include:
* Accepting ``-`` as ``TREE_OUTPUT`` to read from standard input.
* ``--version`` flag to report the program version.
* ``--force`` option to overwrite existing files when recreating the hierarchy.
"""

import argparse
from pathlib import Path
import re
import sys

__version__ = "0.1.0"


LINE_RE = re.compile(r"^(?P<prefix>(?:│   |    )*)(?P<fork>[├└])── (?P<name>.+)$")
SUMMARY_RE = re.compile(r"^\d+\s+(?:directories?|files?)", re.I)


def parse_args(args):
    argp = argparse.ArgumentParser(
        prog="transplant",
        description=__doc__,
    )

    argp.add_argument(
        "listing",
        metavar="TREE_OUTPUT",
        help="Text file containing the output of `tree` or '-' for STDIN.",
    )

    argp.add_argument(
        "destination",
        nargs="?",
        metavar="DEST_DIR",
        type=Path,
        help="Directory where the hierarchy will be rebuilt.",
    )

    argp.add_argument(
        "-d",
        "--dry-run",
        action="store_true",
        help="Don't touch the filesystem—just report what would be done.",
    )

    argp.add_argument(
        "-v",
        "--verbose",
        action="store_true",
        help="Print each path as it is (or would be) created.",
    )

    argp.add_argument(
        "--force",
        action="store_true",
        help="Overwrite existing files when recreating the hierarchy.",
    )

    argp.add_argument(
        "-V",
        "--version",
        action="version",
        version=f"%(prog)s {__version__}",
        help="Show program's version number and exit.",
    )

    parsed = argp.parse_args(args)
    if not parsed.dry_run and parsed.destination is None:
        argp.error(
            "the following argument is required: DEST_DIR (unless --dry-run is used)"
        )

    return parsed


def is_probably_file(fname):
    return "." in fname.strip(".") and not fname.endswith("/")


def rebuild_tree(listing_path, destination, dry_run=False, verbose=False, force=False):
    if listing_path == "-":
        fh = sys.stdin
    else:
        listing_path = Path(listing_path)
        if not listing_path.exists():
            sys.exit(f"Listing file not found: {listing_path}")
        fh = listing_path.open("r", encoding="utf-8")

    if dry_run:
        verbose = True
        destination = Path("/")
    else:
        if verbose:
            print(f"MAKING {destination}")
        destination.mkdir(parents=True, exist_ok=True)

    stack = [destination]

    for raw in fh:
        line = raw.rstrip("\n")
        if verbose:
            print(line)

        if line.strip() == "." or SUMMARY_RE.match(line):
            continue

        m = LINE_RE.match(line)
        if not m:
                if verbose:
                    print("failed to match line format, skipping...")
                continue

        depth = len(m.group("prefix")) // 4 + 1
        name = m.group("name").rstrip("/")
        if verbose:
                print(f"Depth: {depth}, Name: {name}")

        stack = stack[:depth]
        parent_dir = stack[-1]
        target = parent_dir / name
        if verbose:
                print(f"parent: {parent_dir}")
                print(f"CREATE {target}")

        if is_probably_file(name):
                if not dry_run:
                    target.parent.mkdir(parents=True, exist_ok=True)
                    if force:
                        with target.open("w", encoding="utf-8"):
                            pass
                    else:
                        target.touch(exist_ok=True)
        else:
                if not dry_run:
                    if force and target.exists() and target.is_file():
                        target.unlink()
                    target.mkdir(parents=True, exist_ok=True)
                stack.append(target)

    if fh is not sys.stdin:
        fh.close()

    print(f"Directory structure transplanted to {destination.resolve()}")


def main(args):
    params = parse_args(args)

    rebuild_tree(
        listing_path=params.listing,
        destination=params.destination,
        dry_run=params.dry_run,
        verbose=params.verbose,
        force=params.force,
    )


if __name__ == "__main__":
    main(sys.argv[1:])
